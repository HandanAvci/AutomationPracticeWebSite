<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite skipped="6" hostname="LAPTOP-1RMVF318" name="com.automationpractice.testng.ParameterByDataProvider" tests="7" failures="0" timestamp="04 Feb 2020 17:47:32 GMT" time="0.015" errors="1">
  <testcase name="setup" time="0.015" classname="com.automationpractice.testng.ParameterByDataProvider">
    <error type="org.openqa.selenium.WebDriverException" message="Cannot find firefox binary in PATH. Make sure firefox is installed. OS appears to be: WIN10
Build info: version: &#039;3.141.59&#039;, revision: &#039;e82be7d358&#039;, time: &#039;2018-11-14T08:17:03&#039;
System info: host: &#039;LAPTOP-1RMVF318&#039;, ip: &#039;192.168.86.22&#039;, os.name: &#039;Windows 10&#039;, os.arch: &#039;amd64&#039;, os.version: &#039;10.0&#039;, java.version: &#039;1.8.0_221&#039;
Driver info: driver.version: FirefoxDriver">
      <![CDATA[org.openqa.selenium.WebDriverException: Cannot find firefox binary in PATH. Make sure firefox is installed. OS appears to be: WIN10
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'LAPTOP-1RMVF318', ip: '192.168.86.22', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: driver.version: FirefoxDriver
at org.openqa.selenium.firefox.FirefoxBinary.<init>(FirefoxBinary.java:100)
at java.util.Optional.orElseGet(Optional.java:267)
at org.openqa.selenium.firefox.FirefoxOptions.getBinary(FirefoxOptions.java:216)
at org.openqa.selenium.firefox.FirefoxDriver.toExecutor(FirefoxDriver.java:187)
at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:147)
at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:125)
at com.automationpractice.testng.ParameterByDataProvider.setup(ParameterByDataProvider.java:24)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:455)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:142)
at org.testng.TestRunner.beforeRun(TestRunner.java:529)
at org.testng.TestRunner.run(TestRunner.java:497)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </error>
  </testcase> <!-- setup -->
  <testcase name="testMethodA" time="0.000" classname="com.automationpractice.testng.ParameterByDataProvider">
    <skipped/>
  </testcase> <!-- testMethodA -->
  <testcase name="testMethodB" time="0.000" classname="com.automationpractice.testng.ParameterByDataProvider">
    <skipped/>
  </testcase> <!-- testMethodB -->
  <testcase name="testMethodB" time="0.000" classname="com.automationpractice.testng.ParameterByDataProvider">
    <skipped/>
  </testcase> <!-- testMethodB -->
  <testcase name="testMethodA" time="0.000" classname="com.automationpractice.testng.ParameterByDataProvider">
    <skipped/>
  </testcase> <!-- testMethodA -->
  <testcase name="testMethodA" time="0.000" classname="com.automationpractice.testng.ParameterByDataProvider">
    <skipped/>
  </testcase> <!-- testMethodA -->
  <testcase name="testMethodB" time="0.000" classname="com.automationpractice.testng.ParameterByDataProvider">
    <skipped/>
  </testcase> <!-- testMethodB -->
</testsuite> <!-- com.automationpractice.testng.ParameterByDataProvider -->
